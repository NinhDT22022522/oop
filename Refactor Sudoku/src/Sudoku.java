import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;

import static java.util.Arrays.copyOf;

public class Sudoku {
    private int[][] board;
    private SudokuSolver sudokuSolver; // Sudoku solving method

    public Sudoku(int[][] grid, SudokuSolver sudokuSolver) {
        // Create a board from the input grid
        this.board = new int[9][9];
        for (int i = 0; i < 9; i++) {
            this.board[i] = copyOf(grid[i], 9);
        }
        this.sudokuSolver = sudokuSolver;
    }

    public boolean solve() {
        // Solving game
        if (sudokuSolver == null){
            throw new RuntimeException("Solver is not set");
        }
        else return sudokuSolver.solve(this.getGrid());
    }

    public int[][] getGrid() {
        // Return current state
        return board;
    }

    public String toString() {
        // Returns the character string generated by the 9 rows of the game table rows
        StringBuilder sb = new StringBuilder();
        for (int[] row : board) {
            for (int num : row) {
                sb.append(num).append(" ");
            }
            sb.append("\n");
        }
        return sb.toString();

    }

    public void saveToFile(String fileName) throws IOException {
        // Save current state to file
        Path path = Paths.get(fileName);
        Files.write(path, this.toString().getBytes());
    }

    public void loadFromFile(String fileName) throws IOException, IllegalAccessException {
        // Load state from file
        Path path = Paths.get(fileName);
        BufferedReader reader = Files.newBufferedReader(path);
        String row1 = reader.readLine();
        String row2 = reader.readLine();
        String row3 = reader.readLine();
        String row4 = reader.readLine();
        String row5 = reader.readLine();
        String row6 = reader.readLine();
        String row7 = reader.readLine();
        String row8 = reader.readLine();
        String row9 = reader.readLine();
        this.board = stringsToGrid(row1, row2, row3, row4, row5, row6, row7, row8, row9);

    }

    public void loadLevel(String fileName) throws IOException, IllegalAccessException {
        // Load level from file
        loadFromFile(fileName);
    }



    public static int[][] stringsToGrid(String... rows) throws IllegalAccessException {
        // Convert from string to grid
        if (rows.length < 9){
            // Handing grid not enough rows
            throw new IllegalAccessException("Grid does not contain enough rows!!!");
        }
        int[][] grid = new int[9][9];
        for (int i = 0; i < 9; i++) {
            String[] rowValues = rows[i].trim().split(" ");
            if (rowValues.length < 9){
                // Handing if row not enough values
                throw new IllegalAccessException("Row " + i + " does not contain enough values!!!");
            }
            for (int j = 0; j < 9; j++) {
                try {
                    grid[i][j] = Integer.parseInt(rowValues[j]);
                    if (grid[i][j] < 0 || grid[i][j] > 9){
                        throw new IllegalAccessException("Value in " + i + ", " + j + " is invalid!!!");
                    }
                }
                catch(NumberFormatException numberFormatException){
                    // Handing if values is not number
                    grid[i][j] = 0;
                }
            }
        }

        for (int i = 0; i < 9; i++){
            for (int j = 0; j < 9; j++){
                if (grid[i][j] != 0){
                    if (!isValidSudoku(grid)){
                        throw new IllegalAccessException("Input is invalid!!!");
                    }
                }
            }
        }
        return grid;
    }

    public static boolean isValidSudoku(int[][] grid) {
        // Check rows
        for (int i = 0; i < 9; i++) {
            boolean[] seen = new boolean[10];
            for (int j = 0; j < 9; j++) {
                int num = grid[i][j];
                if (num != 0) {
                    if (seen[num]) {
                        return false;
                    }
                    seen[num] = true;
                }
            }
        }

        // Check columns
        for (int j = 0; j < 9; j++) {
            boolean[] seen = new boolean[10];
            for (int i = 0; i < 9; i++) {
                int num = grid[i][j];
                if (num != 0) {
                    if (seen[num]) {
                        return false;
                    }
                    seen[num] = true;
                }
            }
        }

        // Check subgrid
        for (int k = 0; k < 9; k++) {
            boolean[] seen = new boolean[10];
            int subgridRowStart = (k / 3) * 3;
            int subgridColStart = (k % 3) * 3;
            for (int i = subgridRowStart; i < subgridRowStart + 3; i++) {
                for (int j = subgridColStart; j < subgridColStart + 3; j++) {
                    int num = grid[i][j];
                    if (num != 0) {
                        if (seen[num]) {
                            return false;
                        }
                        seen[num] = true;
                    }
                }
            }
        }

        return true;
    }

    public void setSolver(SudokuSolver sudokuSolver){
        // Change method to solve
        this.sudokuSolver = sudokuSolver;
    }

    public static void main(String[] args) throws Exception {
        int[][] grid = stringsToGrid(
                "1 6 4 0 0 0 0 0 0",
                "2 0 0 4 0 3 9 1 0",
                "0 0 5 0 8 0 4 0 7",
                "0 9 0 0 0 6 5 0 0",
                "5 0 0 1 0 2 0 0 8",
                "0 0 8 9 0 0 0 3 0",
                "8 0 9 0 4 0 2 0 0",
                "0 7 3 5 0 9 0 0 1",
                "4 0 0 0 0 0 6 7 9"
        );
        SudokuSolver sudokuSolver1 = new BackTrackSolver();
        Sudoku sudoku = new Sudoku(grid, sudokuSolver1);
        sudoku.setSolver(sudokuSolver1);
        System.out.println("1. Easy");
        System.out.println("2. Medium");
        System.out.println("3. Hard");
        Scanner scanner = new Scanner(System.in);
        int input = scanner.nextInt();
        if (input == 1){
            sudoku.loadLevel("D:\\\\Oop\\\\oop\\\\Refactor Sudoku\\\\src\\\\file\\\\Easy.txt");
            System.out.println(sudoku.solve());
            sudoku.saveToFile("D:\\\\Oop\\\\oop\\\\Refactor Sudoku\\\\src\\\\file\\\\SaveEasy.txt");
        }
        else if (input == 2){
            sudoku.loadLevel("D:\\\\Oop\\\\oop\\\\Refactor Sudoku\\\\src\\\\file\\\\Medium.txt");
            System.out.println(sudoku.solve());
            sudoku.saveToFile("D:\\\\Oop\\\\oop\\\\Refactor Sudoku\\\\src\\\\file\\\\SaveMedium.txt");
        }
        else if (input == 3){
            sudoku.loadLevel("D:\\\\Oop\\\\oop\\\\Refactor Sudoku\\\\src\\\\file\\\\Hard.txt");
            System.out.println(sudoku.solve());
            sudoku.saveToFile("D:\\Oop\\oop\\Refactor Sudoku\\src\\file\\SaveHard.txt");
        }

    }
}
